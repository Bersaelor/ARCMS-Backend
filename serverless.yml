service: ARCMS-Backend # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  environment:
    CANDIDATE_TABLE: arcms-brandUserOrders
    ACCESS_STORE: store
    ACCESS_MANAGER: manager
    ACCESS_ADMIN: admin


package:
  individually: true
  exclude:
    - "**/*"

resources:
  Resources:
    CandidatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"   
          - AttributeName: "sk"
            AttributeType: "S"   
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "sk"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.CANDIDATE_TABLE}

custom:
  users-role: arn:aws:iam::338756162532:role/ARCMSLambda

functions:
  my-brands:
    handler: user/brands.get
    role: ${self:custom.users-role}
    memorySize: 512
    description: Get all brands the current uses is member in
    package:
      exclude:
        - node_modules/**
      include:
        - user/**
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  create-user:
    handler: user/user.createNew
    role: ${self:custom.users-role}
    memorySize: 512
    description: Create new user with posted values should the current user have enough rights
    package:
      exclude:
        - node_modules/**
      include:
        - user/**
    events:
      - http:
          path: user
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  delete-user:
    handler: user/user.delete
    role: ${self:custom.users-role}
    memorySize: 512
    description: Delete user should the current user have enough rights
    package:
      exclude:
        - node_modules/**
      include:
        - user/**
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  users-by-brand:
    handler: brand/users.all
    role: ${self:custom.users-role}
    memorySize: 512
    description: Get all users for a given brand
    package:
      exclude:
        - node_modules/**
      include:
        - brand/**
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  get-devices:
    handler: devices/devices.all
    role: ${self:custom.users-role}
    memorySize: 512
    description: Get all devices for the current user
    package:
      exclude:
        - node_modules/**
      include:
        - devices/**
    events:
      - http:
          path: devices
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  delete-device:
    handler: devices/devices.delete
    role: ${self:custom.users-role}
    memorySize: 512
    description: Delete a device from the current user
    package:
      exclude:
        - node_modules/**
      include:
        - devices/**
    events:
      - http:
          path: device/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  get-orders:
    handler: orders/orders.all
    role: ${self:custom.users-role}
    memorySize: 512
    description: Get all orders for the current user or brand depending on the accessLvl
    package:
      exclude:
        - node_modules/**
      include:
        - orders/**
    events:
      - http:
          path: orders
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  create-order:
    handler: orders/orders.create
    role: ${self:custom.users-role}
    memorySize: 512
    description: Create new order
    package:
      exclude:
        - node_modules/**
      include:
        - orders/**
    events:
      - http:
          path: order
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v
