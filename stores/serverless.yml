service: STORES 
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  myStage: ${opt:stage, self:provider.stage}
  myEnvironment:
    MESSAGE:
      prod: "This is production environment"
      dev: "This is development environment"
  users-role: arn:aws:iam::338756162532:role/ARCMSLambda
  ec2-role: arn:aws:iam::338756162532:role/ARCMSLambda-EC2

provider:
  name: aws
  stage: dev
  runtime: nodejs10.x
  region: eu-central-1
  apiKeys:
    - value: shbaohotdeilsoyriscy 
      description: A string to restrict access to this api to authorized apps
  usagePlan:
    quota:
      limit: 10000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100
  environment:
    NEWORDERTOPIC: new-glasses-order-${self:custom.myStage}
    MESSAGE: ${self:custom.myEnvironment.MESSAGE.${self:custom.myStage}}
    CANDIDATE_TABLE: arcms-brandUserOrders-${self:custom.myStage}
    IMAGE_BUCKET: looc-cloud-images
    MODEL_BUCKET: ar-glasses-models
    RENDERING_BUCKET: looc-renderings
    STAGE: ${self:custom.myStage}
    ACCESS_STORE: store
    ACCESS_MANAGER: manager
    ACCESS_ADMIN: admin

package:
  individually: true
  exclude:
    - "**/*"
    - node_modules/**

functions:
  get:
    handler: stores.get
    role: ${self:custom.users-role}
    memorySize: 512
    description: Get an array of stores, given a brand and optionally user
    package:
      include:
        - stores.js
        - shared/**
    events:
      - http:
          path: /{brand}
          method: get
          cors: true
          request:
            parameters:
              paths:
                brand: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  new:
    handler: stores.new
    role: ${self:custom.users-role}
    memorySize: 512
    description: Post the configuration for a requested rendering
    package:
      include:
        - stores.js
        - shared/**
    events:
      - http:
          path: /{brand}/{user}
          method: post
          cors: true
          request:
            parameters:
              paths:
                brand: true
                user: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  delete:
    handler: stores.delete
    role: ${self:custom.users-role}
    memorySize: 512
    description: Delete store from the db
    package:
      include:
        - stores.js
        - shared/**
    events:
      - http:
          path: /{brand}/{user}/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                brand: true
                user: true
                id: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  populate-map:
    handler: geolocation.populate
    role: ${self:custom.users-role}
    memorySize: 512
    timeout: 300
    description: Fill the map db with datapoints for all stores of this brand
    package:
      include:
        - geolocation.js
        - shared/**
        - node_modules/**
    environment: 
      GOOGLE_KEY: ${ssm:/Geocoding_APIKey~true}
    events:
      - http:
          path: /geo/{brand}/populate
          method: post
          cors: true
          request:
            parameters:
              paths:
                brand: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:338756162532:userpool/eu-central-1_Qg8GXUJ2v

  geo-get-stores:
    handler: geolocation.get
    role: ${self:custom.users-role}
    memorySize: 512
    timeout: 300
    description: Get store locations on the map
    package:
      include:
        - geolocation.js
        - shared/**
        - node_modules/**
    events:
      - http:
          path: /geo/{brand}/
          private: true
          method: get
          cors: true
          request:
            parameters:
              paths:
                brand: true
